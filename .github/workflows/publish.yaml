name: Publish Container Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Image version tag (e.g. v0.1.0)"
        required: true
        type: string
      push_latest:
        description: "Also tag and push 'latest'"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]
      platforms:
        description: "Target platforms (comma-separated)"
        required: false
        default: linux/amd64,linux/arm64
        type: string

permissions:
  contents: read
  packages: write

concurrency:
  group: publish-${{ github.ref }}-${{ inputs.version }}
  cancel-in-progress: false

env:
  # Will be normalized to lowercase in a step (GitHub owner can be mixed case; ghcr requires lowercase)
  RAW_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/keda-manual-scaler

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Normalize inputs & prepare tags
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          image_name="${RAW_IMAGE_NAME,,}" # lowercase
          version="${{ inputs.version }}"
          if [ -z "$version" ]; then
            echo "Version input is required" >&2; exit 1; fi
          version="${version##refs/tags/}"
          # Basic validation (allow v prefix then semver, or raw semver, or arbitrary safe tag token)
          if ! echo "$version" | grep -Eq '^[A-Za-z0-9][A-Za-z0-9_.-]{0,127}$'; then
            echo "Version contains invalid characters (allowed: alnum . _ - )" >&2; exit 1; fi
          platforms=$(echo "${{ inputs.platforms }}" | tr -d ' ')
          push_latest="${{ inputs.push_latest }}"
          tags="$image_name:$version"
          if [ "$push_latest" = "true" ]; then
            tags="$tags\n$image_name:latest"
          fi
          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
          echo "push_latest=$push_latest" >> $GITHUB_OUTPUT
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$tags" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show build config
        run: |
          echo "Image: ${{ steps.prep.outputs.image_name }}"
            
          echo "Version tag: ${{ steps.prep.outputs.version }}"
          echo "Platforms: ${{ steps.prep.outputs.platforms }}"
          echo "Push latest: ${{ steps.prep.outputs.push_latest }}"
          echo "All tags:" && echo '${{ steps.prep.outputs.tags }}'

      - name: Build & Push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: ${{ steps.prep.outputs.platforms }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            TARGETOS=linux
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output digests
        run: |
          echo "Image digest(s):"
          echo "${{ steps.build.outputs.digest }}"

      - name: Summary
        run: |
          version="${{ steps.prep.outputs.version }}"
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Publish Result
          Image: `${{ steps.prep.outputs.image_name }}`
          Version tag: `${version}`
          Latest tag pushed: `${{ steps.prep.outputs.push_latest }}`
          Digest: `${{ steps.build.outputs.digest }}`

          Pull example:
          
          ```bash
          docker pull ${{ steps.prep.outputs.image_name }}:${version}
          ```
          EOF
